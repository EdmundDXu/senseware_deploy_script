#!/bin/bash
#
############################################ useful util function ######################################################
WARN="\033[37;33m"
TITLE="\033[37;36m"
TEXT="\033[32;38m"
TIPS="\033[36;36m"
END="\033[0m"

function tips(){
    echo -e "${TIPS}${1}${END}"
}

function printWarn(){
    echo -e "${WARN}${1}${END}"
}

function readYN(){
    echo -en "${WARN}${1}${END}"
    read CHOICE
    CHOICE=${CHOICE:="n"}
    if [ ${CHOICE} != "y" ] && [ ${CHOICE} != "Y" ]; then
        return 3
    fi
	return 0
}

function println(){
    echo
}

function printText(){
    echo -e "${TEXT}--------------------------------------------${END}"
    echo -e "${TEXT}${1}${END}"
    echo -e "${TEXT}--------------------------------------------${END}\n"
}

function printList(){
    echo -e "${TEXT}${1}${END}"
}

function printTitle(){
    echo -e "${TITLE}===============${1}===============${END}\n"
}

function genRandomPasswd(){
	dict=(a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z "!" "@" "#" "$" "%" "^" "&" "(" ")" "_" "+" "=" 0 1 2 3 4 5 6 7 8 9)
	for I in `seq 10`; do
    	RANDPASSWD=${RANDPASSWD}${dict[$RANDOM % ${#dict[@]}]}
	done
	echo ${RANDPASSWD}
}

function init(){
    # default configuration
    export DEFAULT_CONFIG_FILE="sdh.conf"
	export SCRIPT_DIR=`pwd`
	export PROGRAM_LIST="web run mongod run_m fsu_receiver kafka"
	export SERVICE_LIST="supervisord redis"

    # import user's configuration to overwrite default configuration
    while getopts "c:" arg # 读取命令行选项和参数
    do
        case $arg in
            c)
                CONFIG_FILE=${OPTARG};; #参数存在$OPTARG中
            *)
                echo "Usage: ./`basename ${0}` [-c CONFIG_FILE]"
            esac
    done

    # 如果没有指定-f选项，则读取默认的配置文件
    export CONFIG_FILE=${CONFIG_FILE:=${DEFAULT_CONFIG_FILE}}
    if [ -f ${CONFIG_FILE} ]; then
        . ${CONFIG_FILE}
    else
        echo "Please provide a configuration file"
        exit -2
    fi
}

function getFilename(){
    ls "packages" | grep ${1} | head -1 | sed "s@\(${1}.*\)\.tar.*@\1@"
}

function getSuffix(){
    ls "packages" | grep ${1} | head -1 | sed "s@${1}.*\.\(tar.*\)@\1@"
}

############################################ useful util function ######################################################


############################################ list function to print and act as a menu list ######################################################
function read_and_handle_choice(){
	if [ $# -lt 1 ]; then
		printWarn "Usage: read_and_handle_choice FUNCTION_LIST"
		return 1
	fi

	#FUNC_LIST=${1}
	#declare -i LIST_SIZE=${#FUNC_LIST[@]}
	declare -i LIST_SIZE=${#}
	stty erase ^H
    read CHOICE
	
	if echo ${CHOICE} | egrep "^[[:digit:]]+$" &> /dev/null && [ ${CHOICE} -eq ${LIST_SIZE} ]; then
		#printList "Bye"
		#exit 0
		break
    elif echo ${CHOICE} | egrep "[[:digit:]]+-[[:digit:]]+" &> /dev/null; then  # check first-second
        FIRST=`echo ${CHOICE} | cut -d'-' -f1`
        SECOND=`echo ${CHOICE} | cut -d'-' -f2`
        if [ ! -z ${FIRST} ] && [ ! -z ${SECOND} ] && [ ${FIRST} -le ${SECOND} ]; then
            if [ ${FIRST} -ge 0 ] && [ ${FIRST} -lt ${LIST_SIZE} ] && [ ${SECOND} -ge 0 ] && [ ${SECOND} -lt ${LIST_SIZE} ] ; then
                for ((Item=${FIRST};Item<=${SECOND};Item++));do
                   # ${FUNC_LIST[${Item}]}
					let Item++ # 此处使用自加的原因是位置变量是从1开始的，而我的列表是从0开始的
					${!Item}
                done
            else
                printWarn "Given value out of bounds!"
		return 6
            fi
        else
            printWarn "Wrong input value!"
            return 5
        fi
    elif echo ${CHOICE} | egrep "^[[:digit:]]+([[:space:]]+[[:digit:]]+)*" &> /dev/null; then  # check 1 2 3
    	if echo ${CHOICE} | egrep "[^[:digit:]&^[:space:]]" &> /dev/null; then
    		printWarn "Please choice some number to execute separated by spaces Or use continuous intervals separated by dash like(1-3)"
        	return 1
        fi
        for num in ${CHOICE}; do
            if [ ${num} -ge 0 ] && [ ${num} -lt ${LIST_SIZE} ] ; then
                #${FUNC_LIST[${num}]}
				let num++ # 此处使用自加的原因是位置变量是从1开始的，而我的列表是从0开始的
				${!num}
            fi
        done
    else
        printWarn "Please choice some number to execute separated by spaces Or use continuous intervals separated by dash like(1-3)"
        return 1
    fi
}


function quick_start(){
	echo -e "${TEXT}--------------------------------------------${END}"
    printList " 0. 前端环境安装"
    printList " 1. 后端环境安装"
    printList " 2. 前端项目更新"
    printList " 3. 后端项目更新"
    printList " 4. 打包部署文件"
    printList " 5. 前端快速部署"
    printList " 6. 后端快速部署"
    printList " 7. 前端环境卸载"
    printList " 8. 后端环境卸载"
    printList " 9. exit"
    printWarn "Please choice a number to execute: "
    echo -e "${TEXT}--------------------------------------------${END}\n"
    
	ARCHIVE_LIST="kafka.tar.gz mongo.tar.gz notification.tar.gz react.tar.gz"
    FUNC_LIST=("install_web_env" "install_backend_env" "update_web" "update_backend" "archive_all_needs ${ARCHIVE_LIST}"  "deploy_web" "deploy_backend" "remove_web_env" "remove_backend_env")

    read_and_handle_choice "${FUNC_LIST[@]}"
}

function complex_deploy(){
	echo -e "${TEXT}--------------------------------------------${END}"
	printList " 0. 拉取最新代码(需在有网络的主机上运行)"
	printList " 1. 更新前端配置文件"
    printList " 2. 更新并构建node packages(需在有网络的主机上运行)"
    printList " 3. 部署前端"
    printList " 4. 更新后端配置文件"
    printList " 5. 打包后端项目"
    printList " 6. 创建/更新venv(需在有网络的主机上运行)"
    printList " 7. 部署后端"     
    printList " 8. exit"
    printWarn "Please choice some number to execute separated by spaces Or use continuous intervals separated by dash like(1-3)"
    echo -e "${TEXT}--------------------------------------------${END}\n"

    FUNC_LIST=("pull_senseware" "modify_web_config_files" "update_and_build_node_packages" "deploy_web" "modify_backend_config_files" "archive_backend" "make_venv" "deploy_backend")


    read_and_handle_choice "${FUNC_LIST[@]}"

}


function complex_install(){
	echo -e "${TEXT}--------------------------------------------${END}"
    printList " 0. 添加用户"
    printList " 1. 安装epel源"
    printList " 2. 安装nodejs"
    printList " 3. 安装mongodb"
    printList " 4. 安装venv"
    printList " 5. 安装redis"
    printList " 6. 安装instantclient"
    printList " 7. 前端项目安装"
    printList " 8. 后端项目安装"
    printList " 9. exit"
    printWarn "Please choice some number to execute separated by spaces Or use continuous intervals separated by dash like(1-3)"
    echo -e "${TEXT}--------------------------------------------${END}\n"


    FUNC_LIST=("add_user" "install_epel" "install_nodejs" "install_mongodb" "install_venv" "install_redis" "install_instantclient" "install_web" "install_backend")

    read_and_handle_choice "${FUNC_LIST[@]}"

}


function complex_uninstall(){
	echo -e "${TEXT}--------------------------------------------${END}"
    printList " 0. 删除用户"
    printList " 1. 卸载epel源"
    printList " 2. 卸载nodejs"
    printList " 3. 卸载mongodb"
    printList " 4. 卸载venv"
	printList " 5. 卸载redis"
    printList " 6. 卸载instantclient"
    printList " 7. 前端项目卸载"
    printList " 8. 后端项目卸载"
    printList " 9. exit"
    printWarn "Please choice some number to execute separated by spaces Or use continuous intervals separated by dash like(1-3)"
    echo -e "${TEXT}--------------------------------------------${END}\n"

    FUNC_LIST=("remove_user" "remove_epel" "remove_nodejs" "remove_mongodb" "remove_venv" "remove_redis" "remove_instantclient" "remove_web" "remove_backend")

    read_and_handle_choice "${FUNC_LIST[@]}"
}


function main_list(){
    echo -e "${TEXT}--------------------------------------------${END}"
    printList " 0. quick start"
    printList " 1. 自定义部署"
    printList " 2. 自定义安装"
    printList " 3. 自定义卸载"
	printList " 4. 生成服务进程配置文件"
    printList " 5. 单机一键安装部署"
	printList " 6. 单机一键卸载（慎用）"
	printList " 7. 一键生成安装包"
    printList " 8. exit"
    echo -e "${TEXT}--------------------------------------------${END}\n"
	# 重新定义erase
	stty erase ^H
    read CHOICE
    FUNC_LIST=("quick_start" "complex_deploy" "complex_install" "complex_uninstall" "generate_conf" "quick_install_and_deploy" "quick_remove" "quick_generate_install_package")
    declare -i LIST_SIZE=${#FUNC_LIST[@]}

    if [ ${CHOICE} -ge 0 ] && [ ${CHOICE} -lt ${LIST_SIZE}  ]; then
		#while true; do
        ${FUNC_LIST[${CHOICE}]}
		#done
    elif [ ${CHOICE} -eq ${LIST_SIZE} ]; then
		printList "Bye"
        exit 0
    else
        printWarn "Please choice a number to execute: "
        exit 1
    fi
}

maintain_list(){
	echo -e "${TEXT}--------------------------------------------${END}"
    printList " 0. 启动所有服务"
    printList " 1. 停止所有服务"
    printList " 2. 验证服务运行状态"
    printList " 3. 验证服务安装情况"
	printList " 4. 用户服务管理"
	printList " 5. 系统服务管理"
    printList " 6. exit"
    echo -e "${TEXT}--------------------------------------------${END}\n"

	FUNC_LIST=("start_all_service" "stop_all_service" "verify_service_running_state" "verify_service_install_state" "maintain_process_list" "maintain_service_list")
	read_and_handle_choice "${FUNC_LIST[@]}"

}

function maintain_process_list(){
while true; do

	declare -i Index=0
	FUNC_LIST=()
	echo -e "${TEXT}--------------------------------------------${END}"
	for Prog in ${PROGRAM_LIST}; do
    	printList " ${Index}. ${Prog}"
		FUNC_LIST[${Index}]="maintain_process ${Prog}"
		let Index++
	done
	printList " ${Index}. 返回"
    echo -e "${TEXT}--------------------------------------------${END}\n"
	
    read_and_handle_choice "${FUNC_LIST[@]}"

done
}

function maintain_process(){
while true; do

	if [ $# -lt 1 ]; then
        printWarn "Useage: maintain_process PROCESS"
        return 1
    fi

	PROCES="${1}"
	echo -e "${TEXT}--------------------------------------------${END}"
	printList " 0. 查看${PROCES}状态"
	printList " 1. 启动${PROCES}"
	printList " 2. 停止${PROCES}"
	printList " 3. 重启${PROCES}"
	printList " 4. 查看${PROCES}运行日志"
	printList " 5. 返回"
    echo -e "${TEXT}--------------------------------------------${END}\n"
	tips "tips: 查看运行日志会进入全屏模式，键入q即可退出。在全屏模式下，"
    tips "键入shift+f可以跟踪日志输出，键入ctrl+c可以退出跟踪模式。"

   
	FUNC_LIST=("process_status ${PROCES}" "process_startup ${PROCES}" "process_shutdown ${PROCES}" "process_restart ${PROCES}" "process_log ${PROCES}")
    read_and_handle_choice "${FUNC_LIST[@]}"

done
}

function maintain_service_list(){
while true; do

    declare -i Index=0
	FUNC_LIST=()
    echo -e "${TEXT}--------------------------------------------${END}"
    for Serv in ${SERVICE_LIST}; do
        printList " ${Index}. ${Serv}"
        FUNC_LIST[${Index}]="maintain_service ${Serv}"
        let Index++
    done
	printList " ${Index}. 返回"
    echo -e "${TEXT}--------------------------------------------${END}\n"

    read_and_handle_choice "${FUNC_LIST[@]}"

done
}

function maintain_service(){
while true; do

	if [ $# -lt 1 ]; then
        printWarn "Useage: maintain_service SERVICE"
        return 1
    fi

	ServI=${1}
	echo -e "${TEXT}--------------------------------------------${END}"
    printList " 0. 查看${ServI}状态"
    printList " 1. 启动${ServI}"
    printList " 2. 停止${ServI}"
    printList " 3. 重启${ServI}"
	if [ ${ServI} == "supervisord" ]; then
    	printList " 4. 重新读取${ServI}配置文件(会导致重启所有服务)"
    	printList " 5. 返回"
	else
    	printList " 4. 返回"
	fi
    echo -e "${TEXT}--------------------------------------------${END}\n"
   
    FUNC_LIST=("service_status ${ServI}" "service_startup ${ServI}" "service_shutdown ${ServI}" "service_restart ${ServI}")
	if [ ${ServI} == "supervisord" ]; then
    	if [ -d ${INSTALL_ROOT}/venv ]; then
			FUNC_LIST[${#FUNC_LIST[@]}]="${INSTALL_ROOT}/venv/bin/supervisorctl reload"
		else
			printWarn "directory ${INSTALL_ROOT}/venv not exists. Please install venv first"
		fi
    fi

	read_and_handle_choice "${FUNC_LIST[@]}"

done
}

############################################ list function to print and act as a menu list ######################################################


############################################ kernel function to implement most of functions ######################################################
function install_web_env(){
    printTitle "Install web env"
    install_epel
    install_nodejs
	install_font
    printTitle "web env installed"
}

function install_backend_env(){
    printTitle "Install backend env"
    install_epel
    install_mongodb
	install_venv
	install_redis
	install_instantclient
    printTitle "backend env installed"
}

function update_web(){
    printTitle "update web"
    pull_senseware
    modify_web_config_files
    update_and_build_node_packages
    printTitle "update web finished"
}

function update_backend(){
    printTitle "update backend"
    pull_senseware
    modify_backend_config_files
	archive_backend
    printTitle "update backend finished"
}

function remove_web_env(){
    printTitle "remove web env"
    remove_epel
    remove_nodejs
    printTitle "web env removed"
}

function remove_backend_env(){
    printTitle "remove backend env"
	remove_epel
    remove_venv
    remove_mongodb
	remove_redis
	remove_instantclient
    printTitle "backend env removed"
}

function quick_install_and_deploy(){
	add_user
	install_web_env
	install_backend_env
	deploy_web
	deploy_backend
}

function quick_remove(){
	if ! readYN "Please check again, Are you sure you want to perform the uninstall operation?(y/N) "; then
		printList "Operation cancelled"
		exit 3
	fi
    remove_user
    remove_web_env
    remove_backend_env
    remove_web
    remove_backend
}


function quick_generate_install_package(){
	if [ -d packages ]; then
		ARCHIVE_LIST="`ls packages`"
	else
		printWarn "directory packages not exists"
		exit 1
	fi
	archive_all_needs ${ARCHIVE_LIST}
}

function version_control(){
	printTitle "update project version file"
	if [ -d ${LOCAL_PROJECT} ]; then
        cd ${LOCAL_PROJECT}
    else
        printWarn "${LOCAL_PROJECT} not exist"
        exit 5
    fi

	echo "version `date +%y%m%d`" > ../VERSION
	git log --skip=1 | head -1 >> ../VERSION
	cd ${SCRIPT_DIR}
	printTitle "version file updated"
}

function generate_conf(){
	printTitle "generate user defined config file"
	if [ -d conf ] && [ -f ./conf/generate_conf.sh ]; then
		./conf/generate_conf.sh
	else
		printWarn "directory conf or file ./conf/generate_conf.sh not exists"
		exit 1
	fi
	printTitle "generate config file complete"
}

function add_user(){
	printTitle "Add user ${SDHUSER}"
	if id ${SDHUSER} &> /dev/null; then
		printWarn "user ${SDHUSER} exists"
		exit -1		
	fi
    useradd ${SDHUSER}
	usermod -L ${SDHUSER}
	printList "add user ${SDHUSER} and lock login in"
    printTitle "user ${SDHUSER} successfully added"
}

function remove_user(){
    printTitle "Remove user ${SDHUSER}"
    if ! id ${SDHUSER} &> /dev/null; then
        printWarn "user ${SDHUSER} not exists"
    else
		printList "remove user ${SDHUSER}"
		userdel -rf ${SDHUSER}
    fi
    printTitle "user ${SDHUSER} successfully removed"
}

# backup and install epel repo
function install_epel(){
	printTitle "Install epel repo"
	DATE=`date +%Y-%m-%d-%H-%M`
    [ -f /etc/yum.repos.d/epel.repo ] && printWarn "find exists epel repo. rename it as epel.repo.backup-${DATE} in /tmp" && mv /etc/yum.repos.d/epel.repo /tmp/epel.repo.backup-${DATE}
    [ -f /etc/yum.repos.d/epel-testing.repo ] && printWarn "find exists epel-testing repo. rename it as epel-testing.repo.backup-${DATE} in /tmp" && mv /etc/yum.repos.d/epel-testing.repo /tmp/epel-testing.repo.backup-${DATE}
    if uname -r | grep "el7" &> /dev/null; then
		if ping -c 1 -W 1 www.baidu.com &> /dev/null; then
        	wget -qO /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo && printList "install /etc/yum.repos.d/epel.repo"
		else
			if [ -d packages ]; then
				cp -a packages/epel-7.repo /etc/yum.repos.d/epel.repo
			else
				printWarn "directory packages not exist"
				return 5
			fi
		fi
    elif uname -r | grep "el6" &> /dev/null; then
        if ping -c 1 -W 1 www.baidu.com &> /dev/null; then
			wget -qO /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo && printList "install /etc/yum.repos.d/epel.repo"
		else
			if [ -d packages ]; then
				cp -a packages/epel-6.repo /etc/yum.repos.d/epel.repo
			else
                printWarn "directory packages not exist"
				return 5
            fi
		fi
    else
        printWarn "Distributions other than centos6 or centos7 are not supported!"
        return 1
    fi
	printTitle "epel repo installed"
}

function remove_epel(){
	printTitle "Remove epel repo"
	printList "remove /etc/yum.repos.d/epel.repo"
	[ -f /etc/yum.repos.d/epel.repo ] && rm -rf /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup-*
	printList "remove /etc/yum.repos.d/epel-testing.repo"
	[ -f /etc/yum.repos.d/epel-testing.repo ] && rm -rf /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup-*

	printTitle "epel repo removed"
}

# install and configure nodejs
function install_nodejs(){
    printTitle "Install and configure nodejs"
    if [ -d packages ]; then
		NODEJS=`getFilename "node"` && SUFFIX=`getSuffix "node"`
    else
        printWarn "directory packages not exist"
		return 5
    fi

	if [ -d ${INSTALL_ROOT}/nodejs ]; then
	    printWarn "${INSTALL_ROOT}/nodejs exists with version ${NODEJS}!"
	else
		printList "copy nodejs program files to ${INSTALL_ROOT}/nodejs"
    	if [ -d packages ]; then
			tar xf "packages/${NODEJS}.${SUFFIX}" -C ${INSTALL_ROOT}
		else
			printWarn "directory packages not exist"
			return 5
		fi
		mv ${INSTALL_ROOT}/${NODEJS} ${INSTALL_ROOT}/nodejs
	fi
    if [ ! -f /etc/profile.d/nodejs.sh ] ; then
		echo "#!/bin/bash"
	    echo "export NODE_HOME=${INSTALL_ROOT}/nodejs" | tee -a /etc/profile.d/nodejs.sh
		echo "export PATH="'${NODE_HOME}/bin:${PATH}' | tee -a /etc/profile.d/nodejs.sh
	fi
	printList "add env file /etc/profile.d/nodejs.sh"
	. /etc/profile.d/nodejs.sh
	if node -v && npm config set registry https://registry.npm.taobao.org; then
		printList "setup npm taobao registry"
	else
		printWarn "The installation of nodejs seems to have some problems"
		return 1
	fi
	chown -R ${SDHUSER}:${SDHUSER} ${INSTALL_ROOT}/nodejs
	open_firewall_port web
	printTitle "nodejs installed"
}

function remove_nodejs(){
    printTitle "Remove nodejs"
	printList "remove ${INSTALL_ROOT}/nodejs"
    [ -d ${INSTALL_ROOT}/nodejs ] && rm -rf ${INSTALL_ROOT}/nodejs
    printList 'remove file /etc/profile.d/nodejs.sh'
	if [ -f /etc/profile.d/nodejs.sh ]; then
		rm -f /etc/profile.d/nodejs.sh
    fi
	close_firewall_port web
    printTitle "nodejs removed"
}

# you'd better not use it; this code is deprecate
function install_pip(){
    printTitle "Install and configure python2/pip2"
	if [ -d packages ]; then
		rpm -Uvh packages/python-*
		rpm -Uvh packages/{python-backports-1.0-8.el7.x86_64.rpm,python-backports-ssl_match_hostname-3.5.0.1-1.el7.noarch.rpm,python-ipaddress-1.0.16-2.el7.noarch.rpm}
		rpm -Uvh packages/python2-pip-8.1.2-6.el7.noarch.rpm packages/python-setuptools-0.9.8-7.el7.noarch.rpm
	else
        printWarn "directory packages not exist"
        return 5
    fi
	[ ! -d ~/.pip ] && mkdir -pv ~/.pip
	DATE=`date +%Y-%m-%d-%H-%M`
	[ -f ~/.pip/pip.conf ] && printWarn "find exists ~/.pip/pip.conf. rename it as ~/.pip/pip.conf.backup-${DATE}" && mv ~/.pip/pip.conf ~/.pip/pip.conf.backup-${DATE}
	printList "create ~/.pip/pip.conf"
	echo -e "[global]\ntrusted-host =  mirrors.aliyun.com\nindex-url = https://mirrors.aliyun.com/pypi/simple" > ~/.pip/pip.conf
	printTitle "python2/pip2 installed"
}

function remove_pip(){
	printTitle "Remove python2/pip2"
    if [ -d packages ]; then
		rpm -evh python2-pip python-backports python-backports-ssl_match_hostname python-ipaddress python-setuptools
	else
        printWarn "directory packages not exist"
        return 5
    fi
    printTitle "python2/pip2 removed"
}

# pm2 is now integrated in node, this function is now deprecated
function install_pm2(){
	printTitle "Install pm2"
	if [ -d ${NODE_HOME}/lib/node_modules/pm2 ]; then
		printWarn "pm2 already exists"
	else
		printList "copy pm2 program files to ${NODE_HOME}/lib/node_modules/pm2"
		if [ -d packages ]; then
			tar xf packages/pm2.tar.gz -C ${NODE_HOME}/lib/node_modules/
		else
        	printWarn "directory packages not exist"
        	return 5
    	fi
	fi
	cd ${NODE_HOME}/lib/node_modules/ && npm build pm2 -g && cd ${SCRIPT_DIR}
	chown -R ${SDHUSER}.${SDHUSER} ${NODE_HOME}
	printTitle "pm2 installed"
}

function install_mongodb(){
	PROGRAM="mongodb"
	printTitle "Install ${PROGRAM}"
	if [ -d packages ]; then
		MONGODB=`getFilename "${PROGRAM}"` && SUFFIX=`getSuffix "${PROGRAM}"`
	else
        printWarn "directory packages not exist"
        return 5
    fi
    if [ -d ${INSTALL_ROOT}/${PROGRAM} ]; then
        printWarn "${INSTALL_ROOT}/${PROGRAM} exists with version ${MONGODB}!"
    else
        printList "copy ${PROGRAM} program files to ${INSTALL_ROOT}/${PROGRAM}"
        if [ -d packages ]; then
			tar xf "packages/${MONGODB}.${SUFFIX}" -C ${INSTALL_ROOT}
		else
        	printWarn "directory packages not exist"
        	return 5
    	fi
        mv ${INSTALL_ROOT}/${MONGODB} ${INSTALL_ROOT}/${PROGRAM}
    fi
    if [ ! -f /etc/profile.d/mongod.sh ]; then
		echo "#!/bin/bash"
        echo "export MONGODB_HOME=${INSTALL_ROOT}/${PROGRAM}" | tee -a /etc/profile.d/mongod.sh
        echo "export PATH="'${MONGODB_HOME}/bin:${PATH}' | tee -a /etc/profile.d/mongod.sh
    fi
	printList "add env file /etc/profile.d/mongod.sh"
    . /etc/profile.d/mongod.sh
    if ! mongo --version; then
        printWarn "The installation of ${PROGRAM} seems to have some problems"
        return 1
    fi
	
	# mongod配置文件
	mkdir ${INSTALL_ROOT}/${PROGRAM}/conf
	mkdir ${INSTALL_ROOT}/${PROGRAM}/data
	mkdir ${INSTALL_ROOT}/${PROGRAM}/log
	if [ -d conf ] && [ -f conf/mongod.conf ]; then
		cp conf/mongod.conf ${INSTALL_ROOT}/${PROGRAM}/conf
	else
		printWarn "directory conf or file conf/mongod.conf not exists"
		exit 1
	fi
	mongod -f ${INSTALL_ROOT}/${PROGRAM}/conf/mongod.conf --fork

	# 添加root用户和普通用户
	ADMINPASSWD=`genRandomPasswd`
	printList "用户名: root 密码: "${ADMINPASSWD}
	read -p "请记录下root用户的密码，丢失则难以找回(按任意键继续)"
	${INSTALL_ROOT}/${PROGRAM}/bin/mongod -f ${INSTALL_ROOT}/${PROGRAM}/conf/mongod.conf
	${INSTALL_ROOT}/${PROGRAM}/bin/mongo --host 127.0.0.1 --port 27017 << EOF
use admin
db.createUser(  
   {  
     user: "root",  
     pwd: "${ADMINPASSWD}",  
	 roles: [ { role: "root", db: "admin" } ]  
   }  
)

use ${MONGO_DB}
db.createUser(
     {
       user: "${MONGO_USER}",
       pwd: "${MONGO_PASS}",
       roles: [
          { role: "readWrite", db: "${MONGO_DB}" } ]
     }
)
EOF
	echo "auth = true" >> ${INSTALL_ROOT}/${PROGRAM}/conf/mongod.conf
	${INSTALL_ROOT}/mongodb/bin/mongod -f ${INSTALL_ROOT}/mongodb/conf/mongod.conf --shutdown
	chown -R ${SDHUSER}.${SDHUSER} ${INSTALL_ROOT}/${PROGRAM}
	
	open_firewall_port mongodb
    printTitle "${PROGRAM} installed"
}

function remove_mongodb(){
	printTitle "Remove mongodb"
	printList "shutdown mongod"
	if [ -f ${INSTALL_ROOT}/mongodb/bin/mongod ]; then
		${INSTALL_ROOT}/mongodb/bin/mongod -f ${INSTALL_ROOT}/mongodb/conf/mongod.conf --shutdown
	else
		printWarn "command ${INSTALL_ROOT}/mongodb/bin/mongod not exists"
	fi
    printList "remove ${INSTALL_ROOT}/mongodb"
    [ -d ${INSTALL_ROOT}/mongodb ] && rm -rf ${INSTALL_ROOT}/mongodb
    printList 'remove file /etc/profile.d/mongod.sh'
    if [ -f /etc/profile.d/mongod.sh ]; then
        rm -f /etc/profile.d/mongod.sh
    fi

	close_firewall_port mongodb
    printTitle "mongodb removed"

}


function make_venv(){
	printTitle "Make new venv"
	if ! virtualenv --version &> /dev/null; then
		printWarn "virtualenv not exists. Install virtualenv"
		pip2 install virtualenv
	fi
	if [ -d ${INSTALL_ROOT}/venv ]; then
		DATE=`date +%Y-%m-%d-%H-%M`
		printWarn "${INSTALL_ROOT}/venv exists. Rename it as venv-backup-${DATE} in /tmp"
		mv ${INSTALL_ROOT}/venv /tmp/venv-backup-${DATE}
	fi

	virtualenv ${INSTALL_ROOT}/venv
	if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate && printList "activate venv"
    else
        printWarn "${INSTALL_ROOT}/venv not exists. could not activate venv"
    fi
	which pip2
	
	# 更新并安装最新的python包
	download_and_install_python_packages

	# 安装kafka
	pip2 install kafka

	# 安装supervisor
	pip2 install supervisor
	
	# 安装gunicorn
	pip2 install gunicorn

	# 安装gevent
	pip2 install gevent

	# 安装celery
	pip2 install celery
	
	# 安装完后将venv打包
	archive_venv

	printTitle "make venv complete"
}

function archive_venv(){
	printTitle "archive venv"
	cd ${INSTALL_ROOT}
    if [ -d venv ]; then
    	printList "save venv as packages/venv.tar.gz"
        tar czf ${SCRIPT_DIR}/packages/venv.tar.gz venv
    fi
    cd ${SCRIPT_DIR}

    printTitle "archive venv complete"
}

function install_venv(){
	printTitle "start install venv"
	if [ -d ${INSTALL_ROOT}/venv ]; then
		DATE=`date +%Y-%m-%d-%H-%M`
		printWarn "${INSTALL_ROOT}/venv exists. Rename it as venv-backup-${DATE}"
		mv ${INSTALL_ROOT}/venv ${INSTALL_ROOT}/venv-backup-${DATE}
    fi
	
	printList "copy venv files to ${INSTALL_ROOT}/venv"
    if [ -d packages ]; then
		tar xf packages/venv.tar.gz -C ${INSTALL_ROOT}
	else
        printWarn "directory packages not exist"
        return 5
    fi
	[ -f ${INSTALL_ROOT}/venv/bin/activate ] && . ${INSTALL_ROOT}/venv/bin/activate && printList "activate venv"
	chown -R ${SDHUSER}:${SDHUSER} ${INSTALL_ROOT}/venv
	
	# deploy supervisord.conf
	if [ -d conf ] && [ -f conf/supervisord.conf ]; then
		printList "deploy conf/supervisord.conf to /etc/supervisord.conf"
		cp conf/supervisord.conf /etc/
		mkdir -p /var/supervisor/
	else
		printWarn "directory conf or file conf/supervisord.conf not exist"
        return 5
	fi
	chown -R ${SDHUSER}:${SDHUSER} /etc/supervisord.conf

	# deploy supervisord.service
    if [ -d conf ] && [ -f conf/supervisord.service ]; then
        printList "deploy conf/supervisord.service to /usr/lib/systemd/system/supervisord.service"
        cp conf/supervisord.service /usr/lib/systemd/system
		printList "enable supervisord startup on boot"
		systemctl enable supervisord
    else
        printWarn "directory conf or file conf/supervisord.service not exist"
        return 5
    fi
	
	open_firewall_port run
    printTitle "venv installed"
}


function remove_venv(){
    printTitle "Remove venv"
	printList "shutdown supervisord and all process"
    if [ -f ${INSTALL_ROOT}/venv/bin/supervisorctl ]; then
		${INSTALL_ROOT}/venv/bin/supervisorctl << EOF
stop all
EOF
    else
        printWarn "command ${INSTALL_ROOT}/venv/bin/supervisorctl not exists"
    fi

	printList "remove supervisord"
    for user_process in `ps aux | grep sdhuser | cut -d' ' -f4`; do
        kill ${user_process}
    done

	systemctl disable supervisord
	systemctl stop supervisord
	rm -rf /usr/lib/systemd/system/supervisord.service
	rm -rf /etc/supervisord.conf
	
	printList "remove ${INSTALL_ROOT}/venv"
	[ -d ${INSTALL_ROOT}/venv ] && rm -rf ${INSTALL_ROOT}/venv

	printList "remove ${INSTALL_ROOT}/venv-backup"
	rm -rf ${INSTALL_ROOT}/venv-backup-*

	close_firewall_port run
    printTitle "venv removed"
}

function install_redis(){
    printTitle "install redis"
	if rpm -ql redis &> /dev/null; then
		printList "redis was already installed"
		return 0
	fi

    if [ -d packages ]; then
        if [ -f packages/redis-3.2.12-1.el7.x86_64.rpm ] && [ -f packages/jemalloc-3.6.0-1.el7.x86_64.rpm ]; then
			printList "start install redis"
        	yum install -y --disablerepo=* packages/redis-3.2.12-1.el7.x86_64.rpm packages/jemalloc-3.6.0-1.el7.x86_64.rpm
			printList "enable redis server start up on boot"
			systemctl enable redis
		else
			printWarn "file packages/redis-3.2.12-1.el7.x86_64.rpm or packages/jemalloc-3.6.0-1.el7.x86_64.rpm not exists"
			exit 6
		fi
    else
        printWarn "directory packages not exists in ${LOCAL_PROJECT}"
        return 7
    fi
    printTitle "install redis complete"

}

function remove_redis(){
	printTitle "remove redis"
    if ! rpm -ql redis &> /dev/null; then
        printList "redis was not installed"
        return 0
    fi
	
	printList "stop redis"
	systemctl stop redis
	printList "remove redis.service"
	systemctl disable redis
	printList "start remove redis"
	yum remove -y --disablerepo=* redis
	
	printTitle "remove redis complete"
}


# ${LOCAL_PROJECT}需要自己准备
# you'd better not use it; this code is deprecate
function download_or_update_python_packages(){
	printTitle "download or update python packages"
	if [ -d ${LOCAL_PROJECT} ]; then
		cd ${LOCAL_PROJECT}
	else
		printWarn "Local project ${LOCAL_PROJECT} for installation does not exists."
		return 5
	fi

	printList "download python packages from requirements.txt to ./packages directory"
	if [ -f requirements.txt ]; then 
		pip download -r requirements.txt -d ./packages
	else
		printWarn "requirements.txt not exists in ${LOCAL_PROJECT}"
		return 6
	fi
	
	printList "Archive the packages directory to packages.tar.gz"
	if [ -d packages ]; then
		[ -f ../packages/packages.tar.gz ] && rm -rf ../packages/packages.tar.gz
		tar czf ../packages/packages.tar.gz packages
		cd ${SCRIPT_DIR}
	else
		printWarn "directory packages not exists in ${LOCAL_PROJECT}"
		return 7
	fi
	printTitle "download or update python packages complete"
}


function download_and_install_python_packages(){
	printTitle "download and install python packages"
    if [ -d ${LOCAL_PROJECT} ]; then
        cd ${LOCAL_PROJECT}
    else
        printWarn "Local project ${LOCAL_PROJECT} for installation does not exists."
        return 5
    fi

    printList "download and install python packages from requirements.txt"

    if [ -f requirements.txt ]; then
        /usr/local/venv/bin/pip2 install -r requirements.txt
		cd ${SCRIPT_DIR}
    else
        printWarn "requirements.txt not exists in ${LOCAL_PROJECT}"
        return 6
    fi
	

    printTitle "download and install python packages complete"
}


# you'd better not use it; this code is deprecate
function before_install(){
	printTitle "install the dependencies required by programs"
    if [ -d packages ]; then
		cd packages && rpm -Uvh keyutils-libs-devel-1.5.8-3.el7.x86_64.rpm \
	else
        printWarn "directory packages not exist"
        return 5
    fi
	e2fsprogs-libs-1.42.9-12.el7_5.x86_64.rpm \
	krb5-libs-1.15.1-19.el7.x86_64.rpm \
	libcom_err-1.42.9-12.el7_5.x86_64.rpm \
	libcom_err-devel-1.42.9-12.el7_5.x86_64.rpm \
	libkadm5-1.15.1-19.el7.x86_64.rpm \
	e2fsprogs-1.42.9-12.el7_5.x86_64.rpm \
	libss-1.42.9-12.el7_5.x86_64.rpm \
	libsepol-devel-2.5-8.1.el7.x86_64.rpm \
	libselinux-devel-2.5-12.el7.x86_64.rpm \
	openssl-1.0.2k-12.el7.x86_64.rpm \
	krb5-devel-1.15.1-19.el7.x86_64.rpm \
	openssl-devel-1.0.2k-12.el7.x86_64.rpm \
	openssl-libs-1.0.2k-12.el7.x86_64.rpm \
	zlib-devel-1.2.7-17.el7.x86_64.rpm \
	pcre-devel-8.32-17.el7.x86_64.rpm \
	libverto-devel-0.2.5-4.el7.x86_64.rpm
	cd ${SCRIPT_DIR}
	printTitle "dependencies required by programs installed"
}


# you'd better not use it; this code is deprecate
function install_python_packages(){
	printTitle "install python packages"
	if [ -d ${LOCAL_PROJECT} ]; then
        cd ${LOCAL_PROJECT}
    else
        printWarn "Local project ${LOCAL_PROJECT} for installation does not exists."
        return 5
    fi

    printList "Install the python packages listed in requirements.txt from packages.tar.gz"
    if [ -f requirements.txt ]; then
		if [ -f ../packages/packages.tar.gz ]; then
			[ ! -d packages ] && tar xf ../packages/packages.tar.gz -C packages
			if [ -d packages ]; then
				. ${INSTALL_ROOT}/venv/bin/activate && pip install -r requirements.txt --no-index --find-links=./packages --ignore-installed || return 9
			else
       			printWarn "directory packages not exist"
        		return 5
    		fi
			cd ${SCRIPT_DIR}
		else
			printWarn "file packages.tar.gz not exists"
			return 8
		fi
    else
        printWarn "requirements.txt not exists in ${LOCAL_PROJECT}"
        return 6
    fi

	printTitle "python packages installed"
}


function pull_senseware(){
    printTitle "pull senseware..."
	if [ -d ${LOCAL_PROJECT} ]; then
    	cd ${LOCAL_PROJECT}
	else
		printWarn "${LOCAL_PROJECT} not exist"
		exit 5
	fi
    if ! git checkout ${GIT_BRANCH}; then
		printWarn "no such git branch!"
		exit 6
	fi
	pwd
    if ! git pull; then
        printWarn "git pull seems to have problems, please fix it manually..."
        exit 4
    fi
	cd ${SCRIPT_DIR}
	# 每次拉取新代码都更新一次VERSION文件
	version_control
	printTitle "pull senseware... complete"
}


function modify_web_config_files(){
    # modify Constants.js
    printTitle "modify Constants.js"
	CONSTANTSJS_NEW_LINE=${CONSTANTSJS_NEW_LINE:=" '172.21.8.120': 'http://172.21.8.118:3082',\n  '172.21.8.121': 'http://172.21.8.121:3082',"}
	# 添加两行，其中一行是第二台web server和backend server，另一行是nginx server
	if grep "const allUrl = {" ${CONSTANTSJS} &> /dev/null; then
		if ! grep "`echo -e ${CONSTANTSJS_NEW_LINE}`" ${CONSTANTSJS} &> /dev/null; then
			DATE=`date +%Y-%m-%d-%H-%M`
			printWarn "Rename Constants.js as Constants.js.newline-${DATE} in /tmp"
			cp -a ${CONSTANTSJS} /tmp/Constants.js.newline-${DATE}
			sed -i "/const allUrl = {/a\ ${CONSTANTSJS_NEW_LINE}" ${CONSTANTSJS}
		fi
	else
		printWarn "something wrong with Constant.js"
		exit 7
	fi
    printText "`cat ${CONSTANTSJS} | grep -A 10 'const allUrl = {'`"

	if grep "nvrUrl" ${CONSTANTSJS} &> /dev/null && grep "${NVRURL}" ${CONSTANTSJS} &> /dev/null ; then
        if ! grep "^[[:space:]]*nvrUrl[[:space:]]*:[[:space:]]*'${NVRURL}'.*" ${CONSTANTSJS} &> /dev/null; then
            DATE=`date +%Y-%m-%d-%H-%M`
            printWarn "Rename Constants.js as Constants.js.nvrUrl-${DATE} in /tmp"
            cp -a ${CONSTANTSJS} /tmp/Constants.js.nvrUrl-${DATE}
            # 将其他没被注释的nvrUrl注释起来
            sed -i "s@^[[:space:]]*\(nvrUrl:.*\)@  // \1@i" ${CONSTANTSJS}

            # 将// nvrUrl: ${NVRURL}的注释去掉
            sed -i "s@[[:space:]]*//[[:space:]]*\(nvrUrl[[:space:]]*:[[:space:]]*'${NVRURL}'.*\)@  \1@i" ${CONSTANTSJS}
        fi
    else
        printWarn "something wrong with nvrUrl in Constant.js"
        exit 7
    fi	
	printText "`cat ${CONSTANTSJS} | grep -C 3 'nvrUrl'`"

	if grep "datawarehouse" ${CONSTANTSJS} &> /dev/null && grep "${DATAWAREHOUSE}" ${CONSTANTSJS} &> /dev/null ; then
    	if ! grep "^[[:space:]]*datawarehouse[[:space:]]*:[[:space:]]*'${DATAWAREHOUSE}'.*" ${CONSTANTSJS} &> /dev/null; then
    		DATE=`date +%Y-%m-%d-%H-%M`
			printWarn "Rename Constants.js as Constants.js.datawarehouse-${DATE} in /tmp"
			cp -a ${CONSTANTSJS} /tmp/Constants.js.datawarehouse-${DATE}
	    	# 将其他没被注释的datawarehouse注释起来
	    	sed -i "s@^[[:space:]]*\(datawarehouse:.*\)@  // \1@i" ${CONSTANTSJS}

	    	# 将// datawarehouse: ${DATAWAREHOUSE}的注释去掉
	    	sed -i "s@[[:space:]]*//[[:space:]]*\(datawarehouse[[:space:]]*:[[:space:]]*'${DATAWAREHOUSE}'.*\)@  \1@i" ${CONSTANTSJS}
    	fi
	else
		printWarn "something wrong with datawarehouse in Constant.js"
		exit 7
	fi
    printText "`cat ${CONSTANTSJS} | grep -C 1 'datawarehouse'`"

	printTitle "modify Constant.js complete"


    # modify web.js
    printTitle "modify web.js"
	# PROD下前端修改监听端口为${WEB_PORT}
	if grep "app.listen(" ${WEBJS} &> /dev/null; then
		if ! grep "app.listen(.*${WEB_PORT}" ${WEBJS} &> /dev/null; then
			DATE=`date +%Y-%m-%d-%H-%M`
        	printWarn "Rename web.js as web.js.backup-${DATE} in /tmp"
        	cp -a ${WEBJS} /tmp/web.js-${DATE}
			sed -i "s@\(app.listen(\)[[:digit:]]\+\([[:space:]]*,.*\)@\1${WEB_PORT}\2@" ${WEBJS}
		else
			printWarn "web.js no change since last modify"
		fi
    else
        printWarn "something went wrong with web.js"
        return 7
    fi
    printText "`cat ${WEBJS} | grep ${WEB_PORT}`"
	printTitle "modify web.js complete"

}


function modify_backend_config_files(){
    # modify run.py
    printTitle "modify run.py"
	# PROD下后端修改监听端口为${BACKEND_PORT}
	if grep "program.run(.*port=" ${RUNPY} &> /dev/null; then
		if ! grep "program\.run(.*port[[:space:]]*=[[:space:]]*${BACKEND_PORT}" ${RUNPY} &> /dev/null; then
			DATE=`date +%Y-%m-%d-%H-%M`
        	printWarn "Rename run.py as /tmp/run.py.backup-${DATE}"
        	cp -a ${RUNPY} /tmp/run.py-${DATE}
			sed -i "s@\(program\.run(.*port=\)[[:digit:]]\+\([[:space:]]*,.*\)@\1${BACKEND_PORT}\2@" ${RUNPY}
        else
            printWarn "run.py no change since last modify"
        fi
		printList "copy run.py to run82.py"
		cp -a ${RUNPY} ${RUN82PY}
    else
        printWarn "something went wrong with run.py"
        return 7
    fi
    printText "`cat ${RUNPY} | grep ${BACKEND_PORT}`"
    printTitle "modify run.py complete"


	# modify config.py
#    printTitle "modify config.py"
#	 修改mongo = 字段
#	if grep "mongo[[:space:]]*=[[:space:]]*" ${CONFIGPY} &> /dev/null; then
#		 if ! grep "mongo[[:space:]]*=[[:space:]]*'${MONGO}'" ${CONFIGPY} &> /dev/null; then
#		 	DATE=`date +%Y-%m-%d-%H-%M`
#         	printWarn "Rename config.py as config.py.backup-${DATE}"
#        	cp -a ${CONFIGPY} ${CONFIGPY}-${DATE}
#			sed -i "s@\(mongo[[:space:]]*=[[:space:]]*'\).*\('.*\)@\1${MONGO}\2@" ${CONFIGPY}
#        else
#            printWarn "config.py no change since last modify"
#        fi
#
#    else
#        printWarn "something went wrong with config.py"
#        return 7
#    fi
#    printText "`cat ${CONFIGPY} | grep ${MONGO}`"
#    printTitle "modify config.py complete"

	
	# modify config.ini
	printTitle "modify config.ini"
	
	# 在config.ini中验证MONGO_YDXX配置
	SED_LINE=`sed -e '/\[MONGO_YDXX\]/,/;HOST=10/!d' ${CONFIGINI} | wc -l`
	if [ ${SED_LINE} -gt 2 ];then
		grep -A 5 "\[MONGO_YDXX\]" ${CONFIGINI}
		printWarn "something wrong with [MONGO_YDXX] in config.ini"
		vim ${CONFIGINI}
	fi


	# 在config.ini中新添加一个集群节点的配置
	if ! grep "\<${MONGO_CLUSTER}\>" ${CONFIGINI} &> /dev/null; then
		DATE=`date +%Y-%m-%d-%H-%M`
        printWarn "Rename config.ini as config.ini.backup-${DATE} in /tmp"
        cp -a ${CONFIGINI} /tmp/config.ini-${DATE}
		sed -i "1 i${MONGO_CLUSTER_NEW_LINE}" ${CONFIGINI}
	else
		printWarn "Already have [${MONGO_CLUSTER}] item, please modify it manually"
		# return 9
	fi
    printText "`cat ${CONFIGINI} | grep -A 5 ${MONGO_CLUSTER}`"


	# 在config.ini中修改c接口配置
	if grep "URL_FOR_C_INTERFACE[[:space:]]*=[[:space:]]*" ${CONFIGINI} &> /dev/null && grep "\<${URL_FOR_C_INTERFACE}" ${CONFIGINI} &> /dev/null; then
         if ! grep "^[[:space:]]*URL_FOR_C_INTERFACE[[:space:]]*=[[:space:]]*${URL_FOR_C_INTERFACE}" ${CONFIGINI} &> /dev/null; then
            DATE=`date +%Y-%m-%d-%H-%M`
            printWarn "Rename config.ini as config.ini.backup-${DATE} in /tmp"
            cp -a ${CONFIGINI} /tmp/config.ini-${DATE}

            # 将其他没被注释的URL_FOR_C_INTERFACE注释起来
            sed -i "s@^[[:space:]]*\(URL_FOR_C_INTERFACE.*\)@; \1@i" ${CONFIGINI}

            sed -i "s@[[:space:]]*;[[:space:]]*\(URL_FOR_C_INTERFACE[[:space:]]*=[[:space:]]*\)${URL_FOR_C_INTERFACE}\(.*\)@\1${URL_FOR_C_INTERFACE}\2@" ${CONFIGINI}
        else
            printWarn "config.ini no change since last modify"
        fi

    else
        printWarn "something went wrong with config.ini"
        return 7
    fi

    printText "`cat ${CONFIGINI} | grep -C 1 ${URL_FOR_C_INTERFACE}`"

    printTitle "modify config.ini complete" 

}


function update_and_build_node_packages(){
	printTitle "update and build node packages"
    if [ -d ${LOCAL_PROJECT}/${WEB} ]; then
        cd ${LOCAL_PROJECT}/${WEB}
    else
        printWarn "Local project ${LOCAL_PROJECT}/${WEB} for installation does not exists."
        return 5
    fi

    printList "download node packages from package.json to node_modules directory"
    if [ -f package.json ]; then
        npm install || return 8
    else
        printWarn "package.json not exists in ${LOCAL_PROJECT}/${WEB}"
        return 6
    fi

    printList "build node packages"
    if [ -d node_modules ]; then
		if [ -d build ] && readYN "find exist build directory, continue?(Y/n)"; then
			printWarn "remove build directory"
			rm -rf build
		fi
		pwd
		npm run build
		cd ${SCRIPT_DIR}
    else
        printWarn "directory packages not exists in ${LOCAL_PROJECT}"
        return 7
    fi
	
	
	# 对前端项目进行打包
	archive_web

    printTitle "download or update python packages complete"
}

function archive_web(){
	printTitle "archive web project"
	for web in ${WEB}; do
		WEB_NAME="`echo "${web}" | cut -d"/" -f1`"
		if [ -d ${LOCAL_PROJECT}/${WEB_NAME} ]; then
			printList "archive web project to packages/${WEB_NAME}.tar.gz"
			cd ${LOCAL_PROJECT}
			if [ -d ${SCRIPT_DIR}/packages ]; then
				tar czf ${SCRIPT_DIR}/packages/${WEB_NAME}.tar.gz ${WEB_NAME} || return 11
			else
        		printWarn "directory ${SCRIPT_DIR}/packages not exist"
        		return 5
    		fi
			cd ${SCRIPT_DIR}
		else
			printWarn "web project not exist"
			return 2
		fi
	done
	printTitle "archive web project complete"
}

function archive_backend(){
	printTitle "archive backend project"
    
	for back in ${BACKEND}; do
    	if [ -d ${LOCAL_PROJECT}/${back} ]; then
        	printList "archive backend project to packages/${back}.tar.gz"
        	cd ${LOCAL_PROJECT}
        	if [ -d ${SCRIPT_DIR}/packages ]; then
				tar czf ${SCRIPT_DIR}/packages/${back}.tar.gz ${back} || return 11
			else
            	printWarn "directory ${SCRIPT_DIR}/packages not exist"
            	return 5
        	fi
        	cd ${SCRIPT_DIR}
    	else
        	printWarn "backend project not exist"
        	return 2
    	fi
	done
    printTitle "archive backend project complete"
	return 0

}

function deploy_web(){
    printTitle "start deploy web"
	for web in ${WEB}; do
		WEB_NAME="`echo "${web}" | cut -d"/" -f1`"
    	if [ -d ${WEB_ROOT}/${WEB_NAME} ]; then
			DATE=`date +%Y-%m-%d-%H-%M`
        	printWarn "${WEB_ROOT}/${WEB_NAME} exists. Rename it as ${WEB_NAME}-${DATE}"
        	mv ${WEB_ROOT}/${WEB_NAME} ${WEB_ROOT}/${WEB_NAME}-${DATE}
    	fi
    
   		printList "copy web project to ${WEB_ROOT}/${WEB_NAME}"
    	[ ! -d ${WEB_ROOT} ] && mkdir -p ${WEB_ROOT}
		if [ -d packages ]; then
			tar xf packages/${WEB_NAME}.tar.gz -C ${WEB_ROOT}
		else
            printWarn "directory packages not exist"
            return 5
        fi
	done
	chown -R ${SDHUSER}:${SDHUSER} ${WEB_ROOT}
    printTitle "web deployed"
}


function remove_web(){
	printTitle "remove web project"
	printList "remove ${WEB_ROOT}/${WEB_NAME}"
	rm -rf ${WEB_ROOT}/${WEB_NAME}
	printTitle "web project ${WEB_ROOT}/${WEB_NAME} removed"
}

function deploy_backend(){
    printTitle "start deploy backend"
    DATE=`date +%Y-%m-%d-%H-%M`
	for back in ${BACKEND}; do
    	if [ -d ${BACKEND_ROOT}/${back} ]; then
        	printWarn "${BACKEND_ROOT}/${back} exists. Rename it as ${back}-${DATE}"
        	mv ${BACKEND_ROOT}/${back} ${BACKEND_ROOT}/${back}-${DATE}
    	fi

    	printList "copy backend project to ${BACKEND_ROOT}/${back}"
    	[ ! -d ${BACKEND_ROOT} ] && mkdir -p ${BACKEND_ROOT}
    	if [ -d packages ]; then
			tar xf packages/${back}.tar.gz -C ${BACKEND_ROOT}
		else
            printWarn "directory packages not exist"
            return 5
        fi
	done
    # 部署kafka的配置文件和脚本
    deploy_kafka
	chown -R ${SDHUSER}:${SDHUSER} ${BACKEND_ROOT}
    printTitle "backend deployed"
}

function remove_backend(){
	printTitle "remove backend project"
	for back in ${BACKEND}; do
    	printList "remove ${BACKEND_ROOT}/${back}"
    	rm -rf ${BACKEND_ROOT}/${back}
    	printTitle "backend project ${BACKEND_ROOT}/${back} removed"
	done
}

function deploy_kafka(){
    printTitle "start deploy kafka config"
    if [ -d ${BACKEND_ROOT}/mongo ]; then
        printList "copy kafka config to ${BACKEND_ROOT}/mongo"
        if [ -d packages ]; then
			tar xf packages/kafka.tar.gz -C ${BACKEND_ROOT}/mongo
			cp ${BACKEND_ROOT}/mongo/kafka_module/config.py ${BACKEND_ROOT}/mongo
		else
            printWarn "directory packages not exist"
            return 5
        fi
    else
        printWarn "${BACKEND_ROOT}/mongo not exist."
        return 5
    fi

    printTitle "kafka config deployed"
}


function archive_all_needs(){
	printTitle "start archive all needs to deploy"
	ARCHIVE_LIST="$@"
	echo ${ARCHIVE_LIST}
	SCRIPT_LIST="install.sh maintain.sh functions sdh.conf VERSION"
	CONF_LIST="mongod.conf supervisord.conf supervisord.service generate_conf.sh web.xml run.xml mongodb.xml tnsnames.ora"
	if [ -d deploy ]; then
		printWarn "directory deploy exists. Remove it"
		rm -rf deploy
	fi
	mkdir -pv deploy/packages
	for archive in ${ARCHIVE_LIST}; do
		if [ -f packages/${archive} ]; then
			cp -a packages/${archive} deploy/packages
		else
			printWarn "file packages/${archive} not exist"
		fi
	done
	
	for script in ${SCRIPT_LIST}; do
        if [ -f ${script} ]; then
            cp -a ${script} deploy
        else
            printWarn "file ${script} not exist"
        fi
    done

	if [ ! -d conf ]; then
		printWarn "directory conf not exists"
		exit 1
	else
		mkdir deploy/conf
	fi
	for Conf in ${CONF_LIST}; do
        if [ -f conf/${Conf} ]; then
            cp -a conf/${Conf} deploy/conf
        else
            printWarn "file conf/${Conf} not exist"
        fi
    done
	
	printList "archive all needs to deploy.tar.gz"
	tar czf deploy.tar.gz --remove-files deploy
	printTitle "archive all needs complete"
}

function install_font(){
	printTitle "install arial font"
	if ! rpm -ql fontconfig &> /dev/null; then
		printList "install fontconfig-2.10.95-11.el7.x86_64"
		if [ -d packages ]; then
			if [ -f packages/fontconfig-2.10.95-11.el7.x86_64.rpm ] && [ -f packages/fontpackages-filesystem-1.44-8.el7.noarch.rpm ] && [ -f packages/lyx-fonts-2.2.3-1.el7.noarch.rpm ]; then
				yum install -y --disablerepo=* packages/fontconfig-2.10.95-11.el7.x86_64.rpm packages/fontpackages-filesystem-1.44-8.el7.noarch.rpm packages/lyx-fonts-2.2.3-1.el7.noarch.rpm
			else
        		printWarn "installation file packages/fontconfig-2.10.95-11.el7.x86_64.rpm packages/fontpackages-filesystem-1.44-8.el7.noarch.rpm packages/lyx-fonts-2.2.3-1.el7.noarch.rpm for font not exists"
        		exit 5
			fi		
		else
        	printWarn "directory packages not exists"
        	exit 5
    	fi
	fi

	if [ ! -d /usr/share/fonts ]; then
		printWarn "install fontconfig-2.10.95-11.el7.x86_64 failed"
		exit 4
	fi

	if [ -d packages ] && [ -f packages/arial.tar.gz ]; then
		printList "install arial font"
		tar xf packages/arial.tar.gz -C /usr/share/fonts
		fc-cache -fv
	else 
		printWarn "directory packages or file packages/arial.tar.gz not exists"
		exit 5
	fi
	
	printTitle "install ariali font complete"
}

function open_firewall_port(){
	if [ $# -lt 1 ]; then
		printWarn "Usage: open_firewall_port SERVICE"
		exit
	fi
	
	Service=${1}
	printTitle "open ${Service} port"

	if [ -d conf ] && [ -f conf/${Service}.xml ]; then
		printList "copy ${Service}.xml file to /usr/lib/firewalld/services"
		cp -a conf/${Service}.xml /usr/lib/firewalld/services
		printList "open ${Service} port"
		sleep 3
		firewall-cmd --zone=public --permanent --add-service=${Service}
		firewall-cmd --reload
	else
		printWarn "directory conf or file conf/${Service}.xml not exists"
		exit 1
	fi
	printTitle "open ${Service} port complete"

}

function close_firewall_port(){
	if [ $# -lt 1 ]; then
		printWarn "Usage: close_firewall_port SERVICE"
		exit
	fi
	
	Service=${1}
	printTitle "close ${Service} port"
	if [ -d conf ] && [ -f conf/${Service}.xml ]; then
		printList "close ${Service} port"
		firewall-cmd --reload
		firewall-cmd --zone=public --permanent --remove-service=${Service}

        printList "delete ${Service}.xml file from /usr/lib/firewalld/services"
        rm -rf /usr/lib/firewalld/services/${Service}.xml
    else
        printWarn "directory conf or file conf/${Service}.xml not exists"
        exit 1
    fi
	firewall-cmd --reload
	printTitle "close ${Service} port complete"

}

function install_instantclient(){
	printTitle "install oracle instantclient"
	if [ -d packages ]; then
        printList "install oracle instantclient"
		if [ -f packages/oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm ] && [ -f packages/oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm ] && [ -f packages/oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm ]; then
			yum install --disablerepo=* -y packages/{oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm,oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm,oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm}
			printList "set instantclient library"
			sh -c "echo /usr/lib/oracle/12.2/client64/lib > /etc/ld.so.conf.d/oracle-instantclient.conf"
			ldconfig
			echo 'export ORACLE_CLIENT_HOME=/usr/lib/oracle/12.2/client64' >> /etc/profile.d/oracle-instantclient.sh
			echo 'export LD_LIBRARY_PATH=${ORACLE_CLIENT_HOME}/lib:' >> /etc/profile.d/oracle-instantclient.sh
			
			printList "set Oracle configuration files to /usr/lib/oracle/12.2/client64/lib/network/admin/tnsnames.ora"
			sudo mkdir -p /usr/lib/oracle/12.2/client64/lib/network/admin
			
			if [ -d conf ] && [ -f conf/tnsnames.ora ]; then 
				cp conf/tnsnames.ora /usr/lib/oracle/12.2/client64/lib/network/admin
			else
				printWarn "directory conf or file conf/tnsnames.ora not exists"
				exit 4
			fi
			echo 'export TNS_ADMIN=${ORACLE_CLIENT_HOME}/lib/network/admin' >> /etc/profile.d/oracle-instantclient.sh
			
			printList "set oracle instantclient bin path"
			echo 'export PATH=${ORACLE_CLIENT_HOME}/bin:$PATH' >> /etc/profile.d/oracle-instantclient.sh

			source /etc/profile
		else
			printWarn "oracle-instantclient install file packages/oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm packages/oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm packages/oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm not exists"
			exit 4
		fi
    else
        printWarn "directory packages not exists"
        exit 5
    fi

	printTitle "install oracle instantclient complete"
}

function remove_instantclient(){
	printTitle "remove oracle instantclient"
    if rpm -ql oracle-instantclient12.2-basic &> /dev/null; then
        printList "remove oracle instantclient"
        yum --disablerepo=* -y remove oracle-instantclient12.2-basic oracle-instantclient12.2-devel oracle-instantclient12.2-sqlplus
        
		printList "remove instantclient library"
        rm -rf "/etc/ld.so.conf.d/oracle-instantclient.conf"
        ldconfig
        rm -rf /etc/profile.d/oracle-instantclient.sh
		
		printList "remove instantclient installation directory /usr/lib/oracle/12.2/client64"	
		rm -rf /usr/lib/oracle/12.2/client64
    else
        printWarn "oracle instantclient not installed"
        exit 5
    fi

    printTitle "remove oracle instantclient complete"

}

############################################ kernel function to implement most of functions ######################################################


############################################ maintaining function here ##############################################################
function start_all_service(){
	printTitle "start all service"
	if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate
	else
		printWarn "venv not installed. Please install venv first"
		exit 4
	fi
	
	for Serv in ${SERVICE_LIST}; do
		if systemctl status ${Serv} &> /dev/null; then
			printList "${Serv} were already started"
		else
			printList "start ${Serv}"
			systemctl start ${Serv}
		fi
	done

	for Prog in ${PROGRAM_LIST}; do
		if supervisorctl status ${Prog} | grep RUNNING; then
			printList "${Prog} service were already started"
		else
			supervisorctl status ${Prog}
			printList "start ${Prog}"
			supervisorctl start ${Prog}
		fi
	done

	deactivate
	printTitle "start service complete"
}

function stop_all_service(){
	printTitle "stop all service"
	if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate
    else
        printWarn "venv not installed. Please install venv first"
        exit 4
    fi
	
	for Prog in ${PROGRAM_LIST}; do
    	if supervisorctl status ${Prog} | grep RUNNING; then
        	printList "stop ${Prog}"
        	supervisorctl stop ${Prog}
    	else
			systemctl status ${Prog}
        	printList "${Prog} service are not running"
    	fi
	done

	for Serv in ${SERVICE_LIST}; do
        if systemctl status ${Serv} &> /dev/null; then
        	printList "stop ${Serv}"
        	systemctl stop ${Serv}
        else
        	printList "${Serv} are not running"
        fi
    done

	deactivate
	printTitle "stop service complete"
}

function verify_service_running_state(){
	printTitle "verify service running state"
	
	if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate
    else
        printWarn "venv not installed. Please install venv first"
        exit 4
    fi

	for Serv in ${SERVICE_LIST}; do
        if systemctl status ${Serv} &> /dev/null; then
            printList "${Serv} are running"
        else
        	systemctl status ${Serv}
			printWarn "${Serv} are not running"
			if [ ${Serv} == "supervisord" ]; then
				exit 2
			fi
        fi
    done
 	
	for Prog in ${PROGRAM_LIST}; do
    	if supervisorctl status ${Prog} | grep RUNNING; then
        	printList "${Prog} service are running"
    	else
        	supervisorctl status ${Prog}
			printWarn "${Prog} are not running"
    	fi
	done
	
	deactivate
	printTitle "verify service running state complete"
}

function verify_service_install_state(){
	printTitle "verify service install state"

	. /etc/profile

	printTitle "check epel"
	if ls /etc/yum.repos.d/epel.repo &> /dev/null; then
		printList "epel [ok]"
	else
		printWarn "epel [failed]"
		printWarn "please reinstall epel"
	fi
	printTitle "check epel complete"

	printTitle "check nodejs"
	if node -v &> /dev/null; then
		printList "node `node -v` [ok]"
		if npm -v &> /dev/null; then
			printList "npm `npm -v` [ok]"
		else
			printWarn "npm [failed]"
			printWarn "please reinstall nodejs"
		fi
	else
		printWarn "node [failed]"
		printWarn "please reinstall nodejs"
	fi
	printTitle "check nodejs complete"

	printTitle "check mongodb"
	if mongo --version &> /dev/null; then
		printList "`mongo --version | head -1` [ok]"
		if mongod --version &> /dev/null; then
			printList "`mongod --version | head -1` [ok]"
		else
			printWarn "mongod [failed]"
			printWarn "please reinstall mongodb"
		fi
	else
		printWarn "mongo [failed]"
		printWarn "please reinstall mongodb"
	fi
	printTitle "check mongodb complete"

	printTitle "check redis"
    if rpm -ql redis &> /dev/null && redis-server --version &> /dev/null; then
        printList "`redis-server --version` [ok]"
    else
        printWarn "redis-server [failed]"
        printWarn "please reinstall redis"
    fi
    printTitle "check redis complete"

	printTitle "check venv"
	if [ -d ${INSTALL_ROOT}/venv ]; then
		. ${INSTALL_ROOT}/venv/bin/activate
		if pip2 --version &> /dev/null; then
			printList "`pip2 --version`"
			printList "venv [ok]"
		else
			printWarn "venv [failed]"
			printWarn "pip2 not exists.Please redeploy venv"
		fi
	else
		printWarn "venv [failed]"
		printWarn "directory ${INSTALL_ROOT}/venv not exists.Please redeploy venv"
	fi
	printTitle "check venv complete"

	printTitle "check supervisord"
	if supervisord --version &> /dev/null; then
		printList "supervisord `supervisord --version` [ok]"
	else
		printWarn "supervisord [failed]"
		printWarn "Please redeploy venv"
	fi
	printTitle "check supervisord complete"

	printTitle "check gunicorn"
    if gunicorn --version &> /dev/null; then
        printList "`gunicorn --version` [ok]"
    else
        printWarn "gunicorn [failed]"
        printWarn "Please redeploy venv"
    fi
    printTitle "check gunicorn complete"

	printTitle "check celery"
    if celery --version &> /dev/null; then
        printList "celery `celery --version` [ok]"
    else
        printWarn "celery [failed]"
        printWarn "Please redeploy venv"
    fi
    printTitle "check celery complete"
	
	printTitle "check web project"
	if [ -d ${WEB_ROOT}/${WEB} ]; then
		printList "web project [ok]"
	else
		printWarn "web project [failed]"
		printWarn "Please redeploy web project"
	fi
	printTitle "check web complete"

	printTitle "check backend project"
	for back in ${BACKEND}; do
		if [ -d ${BACKEND_ROOT}/${back} ]; then
			printList "backend project ${back} [ok]"
		else
			printWarn "backend project ${back} [failed].Please redeploy backend project"
		fi
	done
	printTitle "check backend complete"

	deactivate
	printTitle "verify service install state complete"
}

function process_status(){
	if [ $# -lt 1 ]; then
        printWarn "Useage: process_status PROCESS"
        return 1
    fi
	
	PROCES="${1}"
	printTitle "print ${PROCES} status"

	if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate
    else
        printWarn "venv not installed. Please install venv first"
        exit 4
    fi

    if ! systemctl status supervisord &> /dev/null; then
        printWarn "supervisord are not running, bring it up first"
		systemctl start supervisord
    fi

	supervisorctl status ${PROCES}

	deactivate
	printTitle "print ${PROCES} status complete"
}

function process_startup(){
	if [ $# -lt 1 ]; then
        printWarn "Useage: process_startup PROCESS"
        return 1
    fi
	
	PROCES="${1}"
	printTitle "bring up ${PROCES} "

	if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate
    else
        printWarn "venv not installed. Please install venv first"
        exit 4
    fi

	if ! systemctl status supervisord &> /dev/null; then
        printWarn "supervisord are not running, bring it up first"
        systemctl start supervisord
    fi
	
	supervisorctl start ${PROCES}

	deactivate
	printTitle "bring up ${PROCES} complete"
}

function process_shutdown(){
	if [ $# -lt 1 ]; then
        printWarn "Useage: process_shutdown PROCESS"
        return 1
    fi
	
	PROCES="${1}"
	printTitle "shutdown ${PROCES} "

	if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate
    else
        printWarn "venv not installed. Please install venv first"
        exit 4
    fi
	
	if ! systemctl status supervisord &> /dev/null; then
        printWarn "supervisord are not running, bring it up first"
        systemctl start supervisord
    fi

	supervisorctl stop ${PROCES}

	deactivate
	printTitle "shutdown ${PROCES} complete"
}

function process_restart(){
	if [ $# -lt 1 ]; then
        printWarn "Useage: process_restart PROCESS"
        return 1
    fi
	
	PROCES="${1}"
	printTitle "restart ${PROCES} "

	if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate
    else
        printWarn "venv not installed. Please install venv first"
        exit 4
    fi
	
	if ! systemctl status supervisord &> /dev/null; then
        printWarn "supervisord are not running, bring it up first"
        systemctl start supervisord
    fi

	supervisorctl restart ${PROCES}

	deactivate
	printTitle "restart ${PROCES} complete"
}

function process_log(){
	if [ $# -lt 1 ]; then
        printWarn "Useage: process_log PROCESS"
        return 1
    fi

    PROCES="${1}"
    printTitle "log ${PROCES} "

    if [ -d ${INSTALL_ROOT}/venv ]; then
        . ${INSTALL_ROOT}/venv/bin/activate
    else
        printWarn "venv not installed. Please install venv first"
        exit 4
    fi

    if ! systemctl status supervisord &> /dev/null; then
        printWarn "supervisord are not running, bring it up first"
        systemctl start supervisord
    fi

   	less +F /var/supervisor/${PROCES}.log

    deactivate
    printTitle "log ${PROCES} complete"

}

function service_status(){
	if [ $# -lt 1 ]; then
        printWarn "Useage: service_status SERVICE"
        return 1
    fi

	SERVIC="${1}"
	printTitle "print ${SERVIC} status"

	printList "status ${SERVIC}"
	systemctl status ${SERVIC}
	
	printTitle "print ${SERVIC} status complete"
}

function service_startup(){
    if [ $# -lt 1 ]; then
        printWarn "Useage: service_startup SERVICE"
        return 1
    fi

    SERVIC="${1}"
    printTitle "start ${SERVIC} "

	printList "start ${SERVIC}"
    systemctl start ${SERVIC}
    
    printTitle "start ${SERVIC} complete"

}

function service_shutdown(){
    if [ $# -lt 1 ]; then
        printWarn "Useage: service_shutdown SERVICE"
        return 1
    fi

    SERVIC="${1}"
    printTitle "stop ${SERVIC} "

	printList "stop ${SERVIC}"
    systemctl stop ${SERVIC}
    
    printTitle "stop ${SERVIC} complete"

}

function service_restart(){
    if [ $# -lt 1 ]; then
        printWarn "Useage: service_restart SERVICE"
        return 1
    fi

    SERVIC="${1}"
    printTitle "restart ${SERVIC} "

	printList "restart ${SERVIC}"
    systemctl restart ${SERVIC}
    
    printTitle "restart ${SERVIC} complete"

}
